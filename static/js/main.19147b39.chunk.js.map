{"version":3,"sources":["services/user.service.js","App.jsx","index.js"],"names":["UserService","googleResponse","a","console","log","googleId","email","profileObj","idToken","tokenId","axios","url","method","headers","Authorization","data","response","userData","App","useCookies","cookies","setCookie","removeCookie","useState","username","UserData","accessKey","setUserData","show","setShow","useEffect","maxAge","userService","onUserLogIn","createUser","onUpdateAccessKey","updateAccessKey","name","className","Navbar","bg","expand","Container","Brand","href","Toggle","Collapse","id","Nav","Link","clientId","buttonText","onLogoutSuccess","type","value","onClick","navigator","clipboard","writeText","onSuccess","onFailure","cookiePolicy","Alert","variant","onClose","dismissible","Heading","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.19147b39.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default class UserService {\n  async createUser(googleResponse) {\n    console.log(googleResponse);\n    const googleId = googleResponse.googleId;\n    const email = googleResponse.profileObj.email;\n    const idToken = googleResponse.tokenId;\n    try {\n      const response = await axios({\n        url: 'https://measurment-assistant.herokuapp.com/api/user',\n        method: 'POST',\n        headers: {\n          Authorization: idToken\n        },\n        data: {\n          googleId,\n          email\n        }\n      });\n      return response.data.userData;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async updateAccessKey(email, idToken, googleId) {\n    try {\n      const response = await axios({\n        url: 'https://measurment-assistant.herokuapp.com/api/user/accesskey',\n        method: 'PUT',\n        headers: {\n          Authorization: idToken\n        },\n        data: {\n          googleId,\n          email\n        }\n      });\n      return response.data.userData;\n    } catch (error) {\n      return error;\n    }\n  }\n}\n","/* eslint-disable no-unused-vars */\r\nimport React from 'react';\r\nimport SwaggerUI from 'swagger-ui-react';\r\nimport { useCookies } from 'react-cookie';\r\nimport { Navbar, Container, Nav } from 'react-bootstrap';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport { useState, useEffect } from 'react';\r\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\r\nimport UserService from './services/user.service';\r\nimport './App.css';\r\nimport 'swagger-ui-react/swagger-ui.css';\r\n\r\nfunction App() {\r\n  const [cookies, setCookie, removeCookie] = useCookies(['UserData']);\r\n  const [userData, setUserData] = useState({\r\n    username: cookies.UserData?.username,\r\n    accessKey: cookies.UserData?.accessKey\r\n  });\r\n  const [show, setShow] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (userData.accessKey && userData.username) {\r\n      setCookie(\r\n        'UserData',\r\n        { username: userData.username, accessKey: userData.accessKey },\r\n        { maxAge: 1800 }\r\n      );\r\n    }\r\n  }, [userData]);\r\n\r\n  const userService = new UserService();\r\n\r\n  const onUserLogIn = async (googleResponse) => {\r\n    const { accessKey, username } = await userService.createUser(googleResponse);\r\n    const { tokenId, googleId } = googleResponse;\r\n    setUserData({ accessKey, username, tokenId, googleId });\r\n  };\r\n\r\n  const onUpdateAccessKey = async () => {\r\n    const response = await userService.updateAccessKey(\r\n      userData.username,\r\n      userData.tokenId,\r\n      userData.googleId\r\n    );\r\n    if (response.name == 'Error') {\r\n      setShow(true);\r\n    } else {\r\n      const accessKey = response.accessKey;\r\n      setUserData({ ...userData, accessKey });\r\n    }\r\n  };\r\n\r\n  const onUserLogOut = () => {\r\n    removeCookie('UserData');\r\n    setUserData({});\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Navbar bg=\"light\" expand=\"lg\">\r\n        <Container>\r\n          <Navbar.Brand href=\"#home\">Measurement Assistant</Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n          <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"me-auto\">\r\n              <Nav.Link href=\"#home\">Documents</Nav.Link>\r\n            </Nav>\r\n            <Nav className=\"justify-content-end\">\r\n              {cookies.UserData ? (\r\n                <>\r\n                  <small className={'userName'}>Signed in as {userData.username}</small>\r\n                  <GoogleLogout\r\n                    clientId=\"759950908416-hdi0alconb3krbcblsmidir074uvafoj.apps.googleusercontent.com\"\r\n                    buttonText=\"Sign out\"\r\n                    onLogoutSuccess={onUserLogOut}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <></>\r\n              )}\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n      <div className={'accessKeyContainer'}>\r\n        <div className={'accessKeyInput'}>\r\n          <input\r\n            type=\"text\"\r\n            value={!cookies.UserData ? 'Log in with google to get access key' : userData.accessKey}\r\n          ></input>\r\n          {!cookies.UserData ? (\r\n            <GoogleLogin\r\n              clientId=\"759950908416-hdi0alconb3krbcblsmidir074uvafoj.apps.googleusercontent.com\"\r\n              buttonText=\"Sign in\"\r\n              onSuccess={onUserLogIn}\r\n              onFailure={onUserLogIn}\r\n              cookiePolicy={'single_host_origin'}\r\n            />\r\n          ) : (\r\n            <>\r\n              <button\r\n                className=\"btnToClipboard\"\r\n                onClick={() => {\r\n                  navigator.clipboard.writeText(userData.accessKey);\r\n                }}\r\n              >\r\n                &#x274F;\r\n              </button>\r\n              <button className=\"btnToClipboard\" onClick={onUpdateAccessKey}>\r\n                &#8635;\r\n              </button>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n      {show == true ? (\r\n        <Alert variant=\"danger\" onClose={() => setShow(false)} dismissible>\r\n          <Alert.Heading>Oops!</Alert.Heading>\r\n          <p>You should sign in again</p>\r\n        </Alert>\r\n      ) : (\r\n        <></>\r\n      )}\r\n      <SwaggerUI url=\"https://measurment-assistant.herokuapp.com/documentation/json\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}